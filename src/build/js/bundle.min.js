(()=>{"use strict";function t(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function e(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var n=function(){function n(t){var e=t.tagName,r=void 0===e?"div":e,o=t.className,i=t.attrs,a=t.html,c=t.text,s=t.children;for(var u in function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this._node=document.createElement(r),this._foundNode=null,o&&(this._node.className=o),a&&(this._node.innerHTML=a),c&&(this._node.textContent=c),s&&this._insert("append",s),i){var f=i[u];f&&this._node.setAttribute(u,f)}}var r,o;return r=n,(o=[{key:"toHtml",value:function(){return this._node.outerHTML}},{key:"toNode",value:function(){return this._node}},{key:"findNode",value:function(t){return this._foundNode="string"==typeof t?this._node.querySelector(t):t,this}},{key:"resetNode",value:function(){return this._foundNode=null,this}},{key:"_insert",value:function(e,n){var r,o,i=(Array.isArray(n)?n:[n]).map((function(t){return t.toNode()}));(r=this._foundNode||this._node)[e].apply(r,function(e){if(Array.isArray(e))return t(e)}(o=i)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(o)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())}},{key:"html",value:function(t){return(this._foundNode||this._node).innerHTML=t,this}},{key:"text",value:function(t){return(this._foundNode||this._node).textContent=t,this}},{key:"append",value:function(t){return this._insert("append",t),this}},{key:"prepend",value:function(t){return this._insert("prepend",t),this}},{key:"before",value:function(t){return this._insert("before",t),this}},{key:"after",value:function(t){return this._insert("after",t),this}},{key:"truncate",value:function(){return(this._foundNode||this._node).innerHTML="",this}},{key:"remove",value:function(){return(this._foundNode||this._node).remove(),this}},{key:"removeChild",value:function(){for(;(this._foundNode||this._node).firstChild;)(this._foundNode||this._node).removeChild((this._foundNode||this._node).firstChild);return this}},{key:"addListeners",value:function(t){for(var e in t){var n=t[e];"function"==typeof n&&(this._foundNode||this._node).addEventListener(e,n)}return this}},{key:"addClass",value:function(t){return(this._foundNode||this._node).classList.add(t),this}},{key:"removeClass",value:function(t){return(this._foundNode||this._node).classList.remove(t),this}}])&&e(r.prototype,o),n}();function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){return(o=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function i(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var c=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&o(t,e)}(c,t);var e,n,r=(e=c,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=a(e);if(n){var o=a(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return i(this,t)});function c(t){var e=t.text;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,c),r.call(this,{tagName:"h1",className:"header",text:e})}return c}(n);function s(t){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function u(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function f(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?u(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function p(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function d(t,e){return(d=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function y(t,e){return!e||"object"!==s(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function h(t){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var b=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&d(t,e)}(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=h(e);if(n){var o=h(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return y(this,t)});function o(){var t,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.className,i=e.title,a=e.type,c=void 0===a?"button":a,s=e.attrs,u=void 0===s?{}:s,l=e.text,d=e.html,y=e.onClick;return p(this,o),(t=r.call(this,{tagName:"button",className:n,attrs:f({type:c,title:i},u),text:l,html:d})).addListeners({click:y}),t}return o}(n);function w(t){return(w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function m(t,e){return(m=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function v(t,e){return!e||"object"!==w(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function g(t){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var O=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&m(t,e)}(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=g(e);if(n){var o=g(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return v(this,t)});function o(t){var e=t.attrs,n=t.text,i=t.like;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),r.call(this,{tagName:"li",className:"tweet-li",attrs:e,html:' <p class="text">'.concat(n,'</p>\n                    <div class="editButtonWrapper">\n                    <button class="remove" data-id="remove">Remove</button>\n                    <button class="like" data-id="like">').concat(i?"UnLike":"Like","</button>\n                    </div>\n                    ")})}return o}(n);function _(t){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function S(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function T(t,e){return(T=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function k(t,e){return!e||"object"!==_(e)&&"function"!=typeof e?j(t):e}function j(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function N(t){return(N=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var P=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&T(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=N(r);if(o){var n=N(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return k(this,t)});function a(t){var e,n=t.storedTweets,r=t.editTweet,o=t.gs;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=i.call(this,{className:"list",html:'<ul class="list-items"></ul>'})).gs=o,e.storedTweets=n,e.editTweet=r,e.addListeners({click:e.handleClick.bind(j(e))}),e.findNode(".list-items").append(n.map((function(t){return new O({attrs:{"data-id":t.id},text:t.text,like:t.like})}))),e}return e=a,(n=[{key:"removeTweet",value:function(t){var e=t.target.closest("li"),n=e.getAttribute("data-id");e.remove(),this.storedTweets.forEach((function(t,e,r){t.id===+n&&r.splice(e,1)})),localStorage.setItem("tweetString",JSON.stringify(this.storedTweets)),this.gs.setState({storedTweets:JSON.parse(localStorage.getItem("tweetString"))})}},{key:"likeTweet",value:function(t){var e=t.target.closest("li").getAttribute("data-id"),n=JSON.parse(localStorage.getItem("tweetString"));n.forEach((function(n){n.id===+e&&(!0===n.like?(n.like=!1,t.target.textContent="Like"):(n.like=!0,t.target.textContent="UnLike"))})),localStorage.setItem("tweetString",JSON.stringify(n)),this.gs.setState({storedTweets:JSON.parse(localStorage.getItem("tweetString"))})}},{key:"handleClick",value:function(t){if(t.target.classList.contains("remove")&&this.removeTweet(t),t.target.classList.contains("like")&&this.likeTweet(t),t.target.classList.contains("text")){var e=t.target.closest("li").getAttribute("data-id");this.editTweet.id=e,this.editTweet.text=t.target.textContent,window.location.hash="edit"}}}])&&S(e.prototype,n),a}(n);function x(t){return(x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function R(t,e){return(R=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function E(t,e){return!e||"object"!==x(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function L(t){return(L=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var C=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&R(t,e)}(o,t);var e,n,r=(e=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,r=L(e);if(n){var o=L(this).constructor;t=Reflect.construct(r,arguments,o)}else t=r.apply(this,arguments);return E(this,t)});function o(t){var e=t.text;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,o),r.call(this,{tagName:"textarea",className:"modifyItemInput",text:e})}return o}(n);function I(t){return(I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function A(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function B(t,e){return(B=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function M(t,e){return!e||"object"!==I(e)&&"function"!=typeof e?J(t):e}function J(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function D(t){return(D=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var H=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&B(t,e)}(s,t);var e,r,o,i,a=(o=s,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=D(o);if(i){var n=D(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return M(this,t)});function s(t){var e,r=t.storedTweets,o=t.className;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,s),(e=a.call(this,{className:o})).storedTweets=r,e.addListeners({click:e.addTweet.bind(J(e))}),e.findNode(".add_content-wrapper").append(new c({text:"Add Tweet"})).append(new C({text:""})).findNode(".modifyItemInput").after(new n({className:"button-wrapper"})).findNode(".button-wrapper").append(new b({className:"cancelModification",text:"Cancel"})).append(new b({className:"saveModifiedItem",text:"Save Change"})),e}return e=s,(r=[{key:"validateTweet",value:function(t,e){var n=[];return n=this.storedTweets.map((function(r){if(r.text===t){var o=document.querySelector(".absMassage");o.classList.remove("hidden"),o.textContent=e,n=1}else n=0;return n})),console.log("[answer]",n),n}},{key:"addTweet",value:function(t){if(t.target.classList.contains("cancelModification")&&(window.location.hash="main"),t.target.classList.contains("saveModifiedItem")&&this.findNode(".modifyItemInput")._foundNode.value){var e=[],n=this.findNode(".modifyItemInput")._foundNode.value;if(this.storedTweets.length>0&&(e=this.validateTweet(n,"Error! You can't tweet about that")),e.includes(1))return;var r={id:999*Math.random()+1,text:n,like:!1};this.storedTweets.push(r),localStorage.setItem("tweetString",JSON.stringify(this.storedTweets)),window.location.hash="main"}}}])&&A(e.prototype,r),s}(n);function q(t){return(q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function U(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Y(t,e){return(Y=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function $(t,e){return!e||"object"!==q(e)&&"function"!=typeof e?G(t):e}function G(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function W(t){return(W=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var z=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Y(t,e)}(s,t);var e,r,o,i,a=(o=s,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=W(o);if(i){var n=W(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return $(this,t)});function s(t){var e,r=t.storedTweets,o=t.className,i=t.editTweet,u=t.gs;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,s),(e=a.call(this,{className:o})).storedTweets=r,e.editTweet=i,e.gs=u,e.addListeners({click:e.toEditTweet.bind(G(e))});var f=new C({text:e.editTweet.text});return console.log("[Area]",f),e.findNode(".add_content-wrapper").append(new c({text:"Edit Tweet"})).append(f).findNode(".modifyItemInput").after(new n({className:"button-wrapper"})).findNode(".button-wrapper").append(new b({className:"cancelModification",text:"Cancel"})).append(new b({className:"saveModifiedItem",text:"Save Change"})),e}return e=s,(r=[{key:"validateTweet",value:function(t,e){var n=[];return n=this.storedTweets.map((function(r){if(r.text===t){var o=document.querySelector(".absMassage");o.classList.remove("hidden"),o.textContent=e,n=1}else n=0;return n})),console.log("[answer]",n),n}},{key:"toEditTweet",value:function(t){if(t.target.classList.contains("cancelModification")&&(window.location.hash="main"),t.target.classList.contains("saveModifiedItem")&&this.findNode(".modifyItemInput")._foundNode.value){var e=[],n=this.findNode(".modifyItemInput")._foundNode.value;if(this.storedTweets.length>0&&(e=this.validateTweet(n,"Error! You can't tweet about that")),e.includes(1))return;var r=this.editTweet.id;this.storedTweets.filter((function(t){return t.id===+r}))[0].text=n,localStorage.setItem("tweetString",JSON.stringify(this.storedTweets)),window.location.hash="main"}}}])&&U(e.prototype,r),s}(n);function F(t){return(F="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function K(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Q(t,e){return(Q=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function V(t,e){return!e||"object"!==F(e)&&"function"!=typeof e?X(t):e}function X(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Z(t){return(Z=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var tt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Q(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Z(r);if(o){var n=Z(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return V(this,t)});function a(t){var e,n=t.storedTweets,r=t.editTweet,o=t.gs;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=i.call(this,{className:"list",html:'<ul class="list-items"></ul>'})).gs=o,e.storedTweets=n,e.editTweet=r,e.filteredTweets=n.filter((function(t){return!0===t.like})),e.addListeners({click:e.handleClick.bind(X(e))}),e.findNode(".list-items").append(e.filteredTweets.map((function(t){return new O({attrs:{"data-id":t.id},text:t.text,like:t.like})}))),e}return e=a,(n=[{key:"removeTweet",value:function(t){var e=t.target.closest("li"),n=e.getAttribute("data-id");e.remove(),this.storedTweets.forEach((function(t,e,r){t.id===+n&&r.splice(e,1)})),localStorage.setItem("tweetString",JSON.stringify(this.storedTweets)),this.gs.setState({storedTweets:JSON.parse(localStorage.getItem("tweetString"))})}},{key:"likeTweet",value:function(t){console.log("[smth str]");var e=t.target.closest("li"),n=e.getAttribute("data-id"),r=JSON.parse(localStorage.getItem("tweetString"));r.forEach((function(t){t.id===+n&&!0===t.like&&(t.like=!1)})),e.remove(),localStorage.setItem("tweetString",JSON.stringify(r)),this.gs.setState({storedTweets:JSON.parse(localStorage.getItem("tweetString"))})}},{key:"handleClick",value:function(t){if(t.target.classList.contains("remove")&&this.removeTweet(t),t.target.classList.contains("like")&&(console.log("[smth str]"),this.likeTweet(t)),t.target.classList.contains("text")){var e=t.target.closest("li").getAttribute("data-id");this.editTweet.id=e,this.editTweet.text=t.target.textContent,this.chekedLikeTweet(),window.location.hash="edit"}}}])&&K(e.prototype,n),a}(n);function et(t){return(et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function nt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function rt(t,e){return(rt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function ot(t,e){return!e||"object"!==et(e)&&"function"!=typeof e?it(t):e}function it(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function at(t){return(at=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var ct=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&rt(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=at(r);if(o){var n=at(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return ot(this,t)});function a(t){var e,n=t.gs;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a);var r=n.getState(),o=r.storedTweets,c=r.activePage,s=r.editTweet;return(e=i.call(this,{className:"app",html:'<div class="app__content content-wrapper"></div>'})).gs=n,n.subscribe(it(e)),e.storedTweets=o,e.editTweet=s,e.addListeners({click:e.changePage.bind(it(e))}),e.createMainPage(),window.location.hash=c,console.log("[this.gs]",e.gs),e}return e=a,(n=[{key:"_render",value:function(t,e){console.log("[prevState]",t),console.log("[nextState]",e);var n=t.storedTweets,r=e.storedTweets;console.log("[get prew]",this.gs.getLikeTweet(n)),console.log("[get next]",this.gs.getLikeTweet(r)),"#main"===window.location.hash&&this.gs.getLikeTweet(n)!==this.gs.getLikeTweet(r)&&(!0===this.gs.getLikeTweet(r)?this.findNode(".goToLiked").removeClass("hidden"):this.findNode(".goToLiked").addClass("hidden"))}},{key:"changePage",value:function(t){t.target.classList.contains("addTweet")&&(window.location.hash="add"),t.target.classList.contains("goToLiked")&&(window.location.hash="liked")}},{key:"createTweetPage",value:function(){var t=this.gs.getState().storedTweets;this.findNode(".app__content").removeChild().append(new H({storedTweets:t,className:"add_content-wrapper"}))}},{key:"onBackClick",value:function(){window.location.hash="main"}},{key:"createLikedPage",value:function(){var t=this.gs.getState(),e=t.storedTweets,n=t.editTweet;this.findNode(".app__content").removeChild().append([new c({text:"Liked Tweet"}),new b({className:"mYback",text:"Back",onClick:this.onBackClick})]).append(new tt({storedTweets:e,editTweet:n,gs:this.gs}))}},{key:"createEditPage",value:function(){this.findNode(".app__content").removeChild().append(new z({storedTweets:this.storedTweets,className:"add_content-wrapper",editTweet:this.editTweet,gs:this.gs}))}},{key:"createMainPage",value:function(){var t=this.gs.getState(),e=t.storedTweets,n=t.editTweet;this.findNode(".app__content").removeChild().append([new c({text:"Simple Twitter"}),new b({className:"addTweet",text:"Add Tweet"}),new b({className:"goToLiked ".concat(!0!==this.gs.getLikeTweet(e)?"hidden":""),text:"Go to liked"})]).append(new P({storedTweets:e,editTweet:n,gs:this.gs}))}}])&&nt(e.prototype,n),a}(n);function st(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function ut(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function ft(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ut(Object(n),!0).forEach((function(e){lt(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ut(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function lt(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function pt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var dt,yt=function(){function t(e){var n=e.initialState;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._state=n,this._prevState=ft({},n),this._subscribers=[]}var e,n;return e=t,(n=[{key:"getState",value:function(){return this._state}},{key:"getLikeTweet",value:function(t){return!!t.some((function(t){return!0===t.like}))}},{key:"setState",value:function(t){var e=ft(ft({},this._state),t);this._prevState=this._state,this._state=e,this._notify()}},{key:"subscribe",value:function(t){this._subscribers.push(t)}},{key:"_notify",value:function(){var t,e=function(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return st(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?st(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return a=t.done,t},e:function(t){c=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw i}}}}(this._subscribers);try{for(e.s();!(t=e.n()).done;)t.value._render(this._prevState,this._state)}catch(t){e.e(t)}finally{e.f()}}}])&&pt(e.prototype,n),t}(),ht=function(t,e){e.append(t.toNode())};dt=null!==localStorage.getItem("tweetString")?JSON.parse(localStorage.getItem("tweetString")):[],localStorage.setItem("tweetString",JSON.stringify(dt));var bt=new ct({gs:new yt({initialState:{activePage:"#main",storedTweets:JSON.parse(localStorage.getItem("tweetString")),editTweet:{}}})});ht(bt,document.getElementById("root")),ht(new n({className:"hidden absMassage",text:"rr"}),document.getElementById("alertMessage")),window.addEventListener("hashchange",(function(){if("#add"===window.location.hash&&bt.createTweetPage(),"#main"===window.location.hash){var t=document.querySelector(".absMassage");t.classList.contains("hidden")||t.classList.add("hidden"),bt.createMainPage()}"#edit"===window.location.hash&&bt.createEditPage(),"#liked"===window.location.hash&&bt.createLikedPage()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sZWFybi13ZWJwYWNrLy4vanMvY29yZS9Db21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vbGVhcm4td2VicGFjay8uL2pzL0hlYWRlci9IZWFkZXIuanMiLCJ3ZWJwYWNrOi8vbGVhcm4td2VicGFjay8uL2pzL0J1dHRvbi9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vbGVhcm4td2VicGFjay8uL2pzL1R3ZWV0L1R3ZWV0LmpzIiwid2VicGFjazovL2xlYXJuLXdlYnBhY2svLi9qcy9MaXN0QWxsVHdlZXRzL0xpc3RBbGxUd2VldHMuanMiLCJ3ZWJwYWNrOi8vbGVhcm4td2VicGFjay8uL2pzL1RleHRBcmVhL1RleHRBcmVhLmpzIiwid2VicGFjazovL2xlYXJuLXdlYnBhY2svLi9qcy9BZGRUd2VldFBhZ2UvQWRkVHdlZXRQYWdlLmpzIiwid2VicGFjazovL2xlYXJuLXdlYnBhY2svLi9qcy9FZGl0VHdlZXRQYWdlL0VkaXRUd2VldFBhZ2UuanMiLCJ3ZWJwYWNrOi8vbGVhcm4td2VicGFjay8uL2pzL0xpa2VkUGFnZS9MaWtlZFBhZ2UuanMiLCJ3ZWJwYWNrOi8vbGVhcm4td2VicGFjay8uL2pzL0FwcC5qcyIsIndlYnBhY2s6Ly9sZWFybi13ZWJwYWNrLy4vanMvY29yZS9HbG9iYWxTdGF0ZS5qcyIsIndlYnBhY2s6Ly9sZWFybi13ZWJwYWNrLy4vanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbGVhcm4td2VicGFjay8uL2pzL2NvcmUvcmVuZGVyLmpzIl0sIm5hbWVzIjpbIkNvbXBvbmVudCIsInRhZ05hbWUiLCJjbGFzc05hbWUiLCJhdHRycyIsImh0bWwiLCJ0ZXh0IiwiY2hpbGRyZW4iLCJrZXkiLCJ0aGlzIiwiX25vZGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJfZm91bmROb2RlIiwiaW5uZXJIVE1MIiwidGV4dENvbnRlbnQiLCJfaW5zZXJ0IiwiYXR0clZhbHVlIiwic2V0QXR0cmlidXRlIiwib3V0ZXJIVE1MIiwibm9kZSIsInF1ZXJ5U2VsZWN0b3IiLCJtZXRob2ROYW1lIiwiY29tcG9uZW50cyIsIm5vZGVzIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwiY2hpbGQiLCJ0b05vZGUiLCJodG1sU3RyaW5nIiwidGV4dFZhbHVlIiwicmVtb3ZlIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwibGlzdGVuZXJzIiwiZXZlbnRUeXBlIiwiZXZlbnRIYW5kbGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsYXNzTGlzdCIsImFkZCIsIkhlYWRlciIsIkJ1dHRvbiIsInRpdGxlIiwidHlwZSIsIm9uQ2xpY2siLCJhZGRMaXN0ZW5lcnMiLCJjbGljayIsIlR3ZWV0IiwibGlrZSIsIkxpc3RBbGxUd2VldHMiLCJzdG9yZWRUd2VldHMiLCJlZGl0VHdlZXQiLCJncyIsImhhbmRsZUNsaWNrIiwiYmluZCIsImZpbmROb2RlIiwiYXBwZW5kIiwidHdlZXQiLCJpZCIsImUiLCJyZW1vdmVMaSIsInRhcmdldCIsImNsb3Nlc3QiLCJyZW1vdmVJZCIsImdldEF0dHJpYnV0ZSIsImZvckVhY2giLCJpZHgiLCJhcnJheSIsInNwbGljZSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5Iiwic2V0U3RhdGUiLCJwYXJzZSIsImdldEl0ZW0iLCJsaWtlZElkIiwidGVzdEFycmF5IiwiY29udGFpbnMiLCJyZW1vdmVUd2VldCIsImxpa2VUd2VldCIsImVkaXRkSWQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhhc2giLCJUZXh0QXJlYSIsIkFkZFR3ZWV0UGFnZSIsImFkZFR3ZWV0IiwiYWZ0ZXIiLCJ1c2VyVHdlZXQiLCJtZXNzYWdlIiwiYW5zd2VyIiwiZXJyb3JUYWciLCJjb25zb2xlIiwibG9nIiwidmFsdWUiLCJsZW5ndGgiLCJ2YWxpZGF0ZVR3ZWV0IiwiaW5jbHVkZXMiLCJNYXRoIiwicmFuZG9tIiwicHVzaCIsIkVkaXRUd2VldFBhZ2UiLCJ0b0VkaXRUd2VldCIsIkFyZWEiLCJmaWx0ZXIiLCJ0dyIsIkxpa2VkUGFnZSIsImZpbHRlcmVkVHdlZXRzIiwibGlrZWRMaSIsImVkaXRlZElkIiwiY2hla2VkTGlrZVR3ZWV0IiwiQXBwIiwiZ2V0U3RhdGUiLCJhY3RpdmVQYWdlIiwic3Vic2NyaWJlIiwiY2hhbmdlUGFnZSIsImNyZWF0ZU1haW5QYWdlIiwicHJldlN0YXRlIiwibmV4dFN0YXRlIiwicHJld1R3ZWVldHMiLCJuZXh0VHdlZWV0cyIsImdldExpa2VUd2VldCIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJvbkJhY2tDbGljayIsInR3ZWV0cyIsIkdsb2JhbFN0YXRlIiwiaW5pdGlhbFN0YXRlIiwiX3N0YXRlIiwiX3ByZXZTdGF0ZSIsIl9zdWJzY3JpYmVycyIsInNvbWUiLCJlbCIsInVwZGF0ZWRTdGF0ZSIsIl9ub3RpZnkiLCJzdWJzY3JpYmVyIiwiX3JlbmRlciIsInJlbmRlciIsImNvbXBvbmVudCIsInBhcmVudE5vZGUiLCJUd2l0dGVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJjcmVhdGVUd2VldFBhZ2UiLCJjcmVhdGVFZGl0UGFnZSIsImNyZWF0ZUxpa2VkUGFnZSJdLCJtYXBwaW5ncyI6Im1TQUFPLElBQU1BLEVBQWIsV0FDSSxjQVNHLFFBUENDLGVBT0QsTUFQVyxNQU9YLEVBTkNDLEVBTUQsRUFOQ0EsVUFDQUMsRUFLRCxFQUxDQSxNQUNBQyxFQUlELEVBSkNBLEtBQ0FDLEVBR0QsRUFIQ0EsS0FDQUMsRUFFRCxFQUZDQSxTQW1CQSxJQUFLLElBQU1DLEssNEZBakJaLFNBQ0NDLEtBQUtDLE1BQVFDLFNBQVNDLGNBQWNWLEdBQ3BDTyxLQUFLSSxXQUFhLEtBRWRWLElBQ1hNLEtBQUtDLE1BQU1QLFVBQVlBLEdBRVpFLElBQ1hJLEtBQUtDLE1BQU1JLFVBQVlULEdBRVpDLElBQ1hHLEtBQUtDLE1BQU1LLFlBQWNULEdBRWRDLEdBQ1hFLEtBQUtPLFFBQVEsU0FBVVQsR0FHRUgsRUFBTyxDQUNyQixJQUFNYSxFQUFZYixFQUFNSSxHQUVuQlMsR0FJTFIsS0FBS0MsTUFBTVEsYUFBYVYsRUFBS1Ms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NjVCQUFBLENBQ21CaEksS0FBSzJILGNBRHhCLElBQ04sMkJBQTRDLFFBQzdCTSxRQUFRakksS0FBSzBILFdBQVkxSCxLQUFLeUgsUUFGdkMsb0Msa0JBdkNkLEtFQWFTLEdBQVMsU0FBQ0MsRUFBV0MsR0FDOUJBLEVBQVdwRixPQUFPbUYsRUFBVS9HLFdEUzlCa0csR0FEMEMsT0FBeEN6RCxhQUFhTSxRQUFRLGVBQ2RKLEtBQUtHLE1BQU1MLGFBQWFNLFFBQVEsZ0JBSWhDLEdBR1hOLGFBQWFDLFFBQVEsY0FBZUMsS0FBS0MsVUFBVXNELEtBRW5ELElBU01lLEdBQVUsSUFBSTdCLEdBRE4sQ0FBRTVELEdBUkwsSUFBSTJFLEdBQVksQ0FDekJDLGFBQWMsQ0FDWmQsV0FmZ0IsUUFnQmhCaEUsYUFBY3FCLEtBQUtHLE1BQU1MLGFBQWFNLFFBQVEsZ0JBQzlDeEIsVUFBVyxRQU9mdUYsR0FBT0csR0FBU25JLFNBQVNvSSxlQUFlLFNBQ3hDSixHQUNFLElBQUkxSSxFQUFVLENBQUVFLFVBQVcsb0JBQXFCRyxLQUFNLE9BQ3RESyxTQUFTb0ksZUFBZSxpQkF1QjFCNUQsT0FBTzdDLGlCQUFpQixjQXBCTCxXQUlqQixHQUg2QixTQUF6QjZDLE9BQU9DLFNBQVNDLE1BQ2xCeUQsR0FBUUUsa0JBRW1CLFVBQXpCN0QsT0FBT0MsU0FBU0MsS0FBa0IsQ0FDcEMsSUFBTVEsRUFBV2xGLFNBQVNVLGNBQWMsZUFDbkN3RSxFQUFTdEQsVUFBVXdDLFNBQVMsV0FDL0JjLEVBQVN0RCxVQUFVQyxJQUFJLFVBR3pCc0csR0FBUXhCLGlCQUVtQixVQUF6Qm5DLE9BQU9DLFNBQVNDLE1BQ2xCeUQsR0FBUUcsaUJBRW1CLFdBQXpCOUQsT0FBT0MsU0FBU0MsTUFDbEJ5RCxHQUFRSSxzQiIsImZpbGUiOiJqcy9idW5kbGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7XHJcbiAgICAgICAgLy9cclxuICAgICAgICB0YWdOYW1lID0gJ2RpdicsXHJcbiAgICAgICAgY2xhc3NOYW1lLFxyXG4gICAgICAgIGF0dHJzLFxyXG4gICAgICAgIGh0bWwsXHJcbiAgICAgICAgdGV4dCxcclxuICAgICAgICBjaGlsZHJlblxyXG4gICAgICAgIC8vXHJcbiAgICB9KSB7XHJcbiAgICAgICAgdGhpcy5fbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XHJcbiAgICAgICAgdGhpcy5fZm91bmROb2RlID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xyXG4gdGhpcy5fbm9kZS5jbGFzc05hbWUgPSBjbGFzc05hbWU7IFxyXG59XHJcbiAgICAgICAgaWYgKGh0bWwpIHtcclxuIHRoaXMuX25vZGUuaW5uZXJIVE1MID0gaHRtbDsgXHJcbn1cclxuICAgICAgICBpZiAodGV4dCkge1xyXG4gdGhpcy5fbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7IFxyXG59XHJcbiAgICAgICAgaWYgKGNoaWxkcmVuKSB7XHJcbiB0aGlzLl9pbnNlcnQoJ2FwcGVuZCcsIGNoaWxkcmVuKTsgXHJcbn1cclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcclxuICAgICAgICAgICAgY29uc3QgYXR0clZhbHVlID0gYXR0cnNba2V5XTtcclxuXHJcbiAgICAgICAgICAgIGlmICghYXR0clZhbHVlKSB7XHJcbiBjb250aW51ZTsgXHJcbn1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKGtleSwgYXR0clZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdG9IdG1sKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ub2RlLm91dGVySFRNTDtcclxuICAgIH1cclxuXHJcbiAgICB0b05vZGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgZmluZE5vZGUobm9kZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdGhpcy5fZm91bmROb2RlID0gdGhpcy5fbm9kZS5xdWVyeVNlbGVjdG9yKG5vZGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZvdW5kTm9kZSA9IG5vZGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICByZXNldE5vZGUoKSB7XHJcbiAgICAgICAgdGhpcy5fZm91bmROb2RlID0gbnVsbDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgX2luc2VydChtZXRob2ROYW1lLCBjb21wb25lbnRzKSB7XHJcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBBcnJheS5pc0FycmF5KGNvbXBvbmVudHMpID8gY29tcG9uZW50cyA6IFtjb21wb25lbnRzXTtcclxuXHJcbiAgICAgICAgY29uc3Qgbm9kZXMgPSBjaGlsZHJlbi5tYXAoY2hpbGQgPT4gY2hpbGQudG9Ob2RlKCkpO1xyXG4gICAgICAgICh0aGlzLl9mb3VuZE5vZGUgfHwgdGhpcy5fbm9kZSlbbWV0aG9kTmFtZV0oLi4ubm9kZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGh0bWwoaHRtbFN0cmluZykge1xyXG4gICAgICAgICh0aGlzLl9mb3VuZE5vZGUgfHwgdGhpcy5fbm9kZSkuaW5uZXJIVE1MID0gaHRtbFN0cmluZztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICB0ZXh0KHRleHRWYWx1ZSkge1xyXG4gICAgICAgICh0aGlzLl9mb3VuZE5vZGUgfHwgdGhpcy5fbm9kZSkudGV4dENvbnRlbnQgPSB0ZXh0VmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgYXBwZW5kKGNvbXBvbmVudHMpIHtcclxuICAgICAgICB0aGlzLl9pbnNlcnQoJ2FwcGVuZCcsIGNvbXBvbmVudHMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHByZXBlbmQoY29tcG9uZW50cykge1xyXG4gICAgICAgIHRoaXMuX2luc2VydCgncHJlcGVuZCcsIGNvbXBvbmVudHMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGJlZm9yZShjb21wb25lbnRzKSB7XHJcbiAgICAgICAgdGhpcy5faW5zZXJ0KCdiZWZvcmUnLCBjb21wb25lbnRzKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBhZnRlcihjb21wb25lbnRzKSB7XHJcbiAgICAgICAgdGhpcy5faW5zZXJ0KCdhZnRlcicsIGNvbXBvbmVudHMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHRydW5jYXRlKCkge1xyXG4gICAgICAgICh0aGlzLl9mb3VuZE5vZGUgfHwgdGhpcy5fbm9kZSkuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlKCkge1xyXG4gICAgICAgICh0aGlzLl9mb3VuZE5vZGUgfHwgdGhpcy5fbm9kZSkucmVtb3ZlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICByZW1vdmVDaGlsZCgpIHtcclxuICAgICAgICB3aGlsZSAoKHRoaXMuX2ZvdW5kTm9kZSB8fCB0aGlzLl9ub2RlKS5maXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgICh0aGlzLl9mb3VuZE5vZGUgfHwgdGhpcy5fbm9kZSkucmVtb3ZlQ2hpbGQoKHRoaXMuX2ZvdW5kTm9kZSB8fCB0aGlzLl9ub2RlKS5maXJzdENoaWxkKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBhZGRMaXN0ZW5lcnMobGlzdGVuZXJzKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBldmVudFR5cGUgaW4gbGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50SGFuZGxlciA9IGxpc3RlbmVyc1tldmVudFR5cGVdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudEhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHtcclxuIGNvbnRpbnVlOyBcclxufVxyXG4gICAgICAgICAgICAodGhpcy5fZm91bmROb2RlIHx8IHRoaXMuX25vZGUpLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgICAgICAgICBldmVudFR5cGUsXHJcbiAgICAgICAgICAgICAgICBldmVudEhhbmRsZXJcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQ2xhc3MoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgKHRoaXMuX2ZvdW5kTm9kZSB8fCB0aGlzLl9ub2RlKS5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUNsYXNzKGNsYXNzTmFtZSkge1xyXG4gICAgICAgICh0aGlzLl9mb3VuZE5vZGUgfHwgdGhpcy5fbm9kZSkuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb3JlL0NvbXBvbmVudCdcclxuXHJcbmV4cG9ydCBjbGFzcyBIZWFkZXIgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Ioe3RleHR9KSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICB0YWdOYW1lOiAnaDEnLFxyXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdoZWFkZXInLFxyXG4gICAgICAgICAgICB0ZXh0OiB0ZXh0XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb3JlL0NvbXBvbmVudCdcclxuXHJcblxyXG4vLyBleHBvcnQgY2xhc3MgQnV0dG9uIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuLy8gICAgIGNvbnN0cnVjdG9yKHtjbGFzc05hbWUsIHRleHR9KSB7XHJcbi8vICAgICAgICAgc3VwZXIoe1xyXG4vLyAgICAgICAgICAgICB0YWdOYW1lOiAnYnV0dG9uJyxcclxuLy8gICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXHJcbi8vICAgICAgICAgICAgIHRleHQ6IHRleHRcclxuLy8gICAgICAgICB9KTtcclxuICAgICAgIFxyXG4vLyAgICAgfVxyXG4gICBcclxuLy8gfVxyXG5cclxuZXhwb3J0IGNsYXNzIEJ1dHRvbiBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7XHJcbiAgICAgICAgLy9cclxuICAgICAgICBjbGFzc05hbWUsXHJcbiAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgdHlwZSA9ICdidXR0b24nLFxyXG4gICAgICAgIGF0dHJzID0ge30sXHJcbiAgICAgICAgdGV4dCxcclxuICAgICAgICBodG1sLFxyXG4gICAgICAgIG9uQ2xpY2tcclxuICAgICAgICAvL1xyXG4gICAgfSA9IHt9KSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICB0YWdOYW1lOiAnYnV0dG9uJyxcclxuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXHJcbiAgICAgICAgICAgIGF0dHJzOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICAgICAgICAuLi5hdHRyc1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0ZXh0LFxyXG4gICAgICAgICAgICBodG1sXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkTGlzdGVuZXJzKHsgY2xpY2s6IG9uQ2xpY2sgfSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvcmUvQ29tcG9uZW50XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVHdlZXQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yKHsgYXR0cnMsIHRleHQsIGxpa2UgfSkge1xyXG4gICAgc3VwZXIoe1xyXG4gICAgICB0YWdOYW1lOiBcImxpXCIsXHJcbiAgICAgIGNsYXNzTmFtZTogXCJ0d2VldC1saVwiLFxyXG4gICAgICBhdHRyczogYXR0cnMsXHJcbiAgICAgIGh0bWw6IGAgPHAgY2xhc3M9XCJ0ZXh0XCI+JHt0ZXh0fTwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZWRpdEJ1dHRvbldyYXBwZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicmVtb3ZlXCIgZGF0YS1pZD1cInJlbW92ZVwiPlJlbW92ZTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJsaWtlXCIgZGF0YS1pZD1cImxpa2VcIj4ke1xyXG4gICAgICAgICAgICAgICAgICAgICAgbGlrZSA/IFwiVW5MaWtlXCIgOiBcIkxpa2VcIlxyXG4gICAgICAgICAgICAgICAgICAgIH08L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICBgLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBcclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiLi4vY29yZS9Db21wb25lbnRcIjtcclxuaW1wb3J0IHsgVHdlZXQgfSBmcm9tIFwiLi4vVHdlZXQvVHdlZXRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBMaXN0QWxsVHdlZXRzIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3Rvcih7IHN0b3JlZFR3ZWV0cywgZWRpdFR3ZWV0LCBncyB9KSB7XHJcbiAgICBzdXBlcih7XHJcbiAgICAgIGNsYXNzTmFtZTogXCJsaXN0XCIsXHJcbiAgICAgIGh0bWw6IGA8dWwgY2xhc3M9XCJsaXN0LWl0ZW1zXCI+PC91bD5gLFxyXG4gICAgfSk7XHJcbiAgICB0aGlzLmdzID0gZ3M7XHJcbiAgICB0aGlzLnN0b3JlZFR3ZWV0cyA9IHN0b3JlZFR3ZWV0cztcclxuICAgIHRoaXMuZWRpdFR3ZWV0ID0gZWRpdFR3ZWV0O1xyXG4gICAgdGhpcy5hZGRMaXN0ZW5lcnMoeyBjbGljazogdGhpcy5oYW5kbGVDbGljay5iaW5kKHRoaXMpIH0pO1xyXG4gICAgdGhpcy5maW5kTm9kZShcIi5saXN0LWl0ZW1zXCIpLmFwcGVuZChcclxuICAgICAgc3RvcmVkVHdlZXRzLm1hcChcclxuICAgICAgICAodHdlZXQpID0+XHJcbiAgICAgICAgICBuZXcgVHdlZXQoe1xyXG4gICAgICAgICAgICBhdHRyczogeyBcImRhdGEtaWRcIjogdHdlZXQuaWQgfSxcclxuICAgICAgICAgICAgdGV4dDogdHdlZXQudGV4dCxcclxuICAgICAgICAgICAgbGlrZTogdHdlZXQubGlrZSxcclxuICAgICAgICAgIH0pXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVUd2VldChlKSB7XHJcbiAgICBsZXQgcmVtb3ZlTGkgPSBlLnRhcmdldC5jbG9zZXN0KFwibGlcIik7XHJcbiAgICBsZXQgcmVtb3ZlSWQgPSByZW1vdmVMaS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWlkXCIpO1xyXG4gICAgcmVtb3ZlTGkucmVtb3ZlKCk7XHJcbiAgICB0aGlzLnN0b3JlZFR3ZWV0cy5mb3JFYWNoKGZ1bmN0aW9uICh0d2VldCwgaWR4LCBhcnJheSkge1xyXG4gICAgICBpZiAodHdlZXQuaWQgPT09ICtyZW1vdmVJZCkge1xyXG4gICAgICAgIGFycmF5LnNwbGljZShpZHgsIDEpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidHdlZXRTdHJpbmdcIiwgSlNPTi5zdHJpbmdpZnkodGhpcy5zdG9yZWRUd2VldHMpKTtcclxuICAgIHRoaXMuZ3Muc2V0U3RhdGUoe1xyXG4gICAgICBzdG9yZWRUd2VldHM6IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0d2VldFN0cmluZ1wiKSksXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGxpa2VUd2VldChlKSB7XHJcbiAgICBsZXQgbGlrZWRMaSA9IGUudGFyZ2V0LmNsb3Nlc3QoXCJsaVwiKTtcclxuICAgIGxldCBsaWtlZElkID0gbGlrZWRMaS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWlkXCIpO1xyXG4gICAgY29uc3QgdGVzdEFycmF5ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInR3ZWV0U3RyaW5nXCIpKTtcclxuICAgIHRlc3RBcnJheS5mb3JFYWNoKGZ1bmN0aW9uICh0d2VldCkge1xyXG4gICAgICBpZiAodHdlZXQuaWQgPT09ICtsaWtlZElkKSB7XHJcbiAgICAgICAgaWYgKHR3ZWV0Lmxpa2UgPT09IHRydWUpIHtcclxuICAgICAgICAgIHR3ZWV0Lmxpa2UgPSBmYWxzZTtcclxuICAgICAgICAgIGUudGFyZ2V0LnRleHRDb250ZW50ID0gXCJMaWtlXCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHR3ZWV0Lmxpa2UgPSB0cnVlO1xyXG4gICAgICAgICAgZS50YXJnZXQudGV4dENvbnRlbnQgPSBcIlVuTGlrZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ0d2VldFN0cmluZ1wiLCBKU09OLnN0cmluZ2lmeSh0ZXN0QXJyYXkpKTtcclxuXHJcbiAgICB0aGlzLmdzLnNldFN0YXRlKHtcclxuICAgICAgc3RvcmVkVHdlZXRzOiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidHdlZXRTdHJpbmdcIikpLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVDbGljayhlKSB7XHJcbiAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicmVtb3ZlXCIpKSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlVHdlZXQoZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImxpa2VcIikpIHtcclxuICAgICAgdGhpcy5saWtlVHdlZXQoZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInRleHRcIikpIHtcclxuICAgICAgbGV0IGVkaXRMaSA9IGUudGFyZ2V0LmNsb3Nlc3QoXCJsaVwiKTtcclxuICAgICAgbGV0IGVkaXRkSWQgPSBlZGl0TGkuZ2V0QXR0cmlidXRlKFwiZGF0YS1pZFwiKTtcclxuICAgICAgdGhpcy5lZGl0VHdlZXQuaWQgPSBlZGl0ZElkO1xyXG4gICAgICB0aGlzLmVkaXRUd2VldC50ZXh0ID0gZS50YXJnZXQudGV4dENvbnRlbnQ7XHJcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gXCJlZGl0XCI7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uL2NvcmUvQ29tcG9uZW50J1xyXG5cclxuZXhwb3J0IGNsYXNzIFRleHRBcmVhIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHt0ZXh0fSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgdGFnTmFtZTogJ3RleHRhcmVhJyxcclxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnbW9kaWZ5SXRlbUlucHV0JyxcclxuICAgICAgICAgICAgdGV4dDogdGV4dCxcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbiAgICBcclxufSIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uL2NvcmUvQ29tcG9uZW50J1xyXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICcuLi9CdXR0b24vQnV0dG9uJ1xyXG5pbXBvcnQgeyBIZWFkZXIgfSBmcm9tICcuLi9IZWFkZXIvSGVhZGVyJ1xyXG5pbXBvcnQgeyBUZXh0QXJlYSB9IGZyb20gJy4uL1RleHRBcmVhL1RleHRBcmVhJ1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBBZGRUd2VldFBhZ2UgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3Ioe3N0b3JlZFR3ZWV0cywgY2xhc3NOYW1lfSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXHJcblxyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgdGhpcy5zdG9yZWRUd2VldHM9IHN0b3JlZFR3ZWV0cztcclxuICAgICAgICAgICAgICB0aGlzLmFkZExpc3RlbmVycyh7IGNsaWNrOiB0aGlzLmFkZFR3ZWV0LmJpbmQodGhpcykgfSk7XHJcblxyXG4gICAgICAgICAgICAgIHRoaXMuZmluZE5vZGUoJy5hZGRfY29udGVudC13cmFwcGVyJylcclxuICAgICAgICAgICAgICAuYXBwZW5kKCBuZXcgSGVhZGVyKHt0ZXh0OiAnQWRkIFR3ZWV0J30pKVxyXG4gICAgICAgICAgICAgIC5hcHBlbmQobmV3IFRleHRBcmVhKHt0ZXh0OiAnJ30pKVxyXG4gICAgICAgICAgICAgIC5maW5kTm9kZSgnLm1vZGlmeUl0ZW1JbnB1dCcpXHJcbiAgICAgICAgICAgICAgLmFmdGVyKG5ldyBDb21wb25lbnQoeyBjbGFzc05hbWU6ICdidXR0b24td3JhcHBlcicgfSkpXHJcbiAgICAgICAgICAgICAgLmZpbmROb2RlKCcuYnV0dG9uLXdyYXBwZXInKVxyXG4gICAgICAgICAgICAgIC5hcHBlbmQobmV3IEJ1dHRvbih7IGNsYXNzTmFtZTogJ2NhbmNlbE1vZGlmaWNhdGlvbicsIHRleHQ6ICdDYW5jZWwnIH0pKVxyXG4gICAgICAgICAgICAgIC5hcHBlbmQoXHJcbiAgICAgICAgICAgICAgICBuZXcgQnV0dG9uKHsgY2xhc3NOYW1lOiAnc2F2ZU1vZGlmaWVkSXRlbScsIHRleHQ6ICdTYXZlIENoYW5nZScgfSlcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFsaWRhdGVUd2VldCh1c2VyVHdlZXQsIG1lc3NhZ2Upe1xyXG4gICAgICAgICAgICBsZXQgYW5zd2VyID0gW107XHJcbiAgICAgICAgICAgIGFuc3dlcj0gIHRoaXMuc3RvcmVkVHdlZXRzLm1hcChmdW5jdGlvbiAodHdlZXQpIHtcclxuICAgICAgICAgICAgICBpZiAodHdlZXQudGV4dCA9PT0gdXNlclR3ZWV0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvclRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hYnNNYXNzYWdlJyk7XHJcbiAgICAgICAgICAgICAgICBlcnJvclRhZy5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgIGVycm9yVGFnLnRleHRDb250ZW50ID0gbWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIGFuc3dlciA9IDE7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFuc3dlciA9IDA7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHJldHVybiBhbnN3ZXI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW2Fuc3dlcl0nLCBhbnN3ZXIpO1xyXG4gICAgICAgICAgICByZXR1cm4gYW5zd2VyO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICBhZGRUd2VldChlKSB7XHJcbiAgICAgICAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2NhbmNlbE1vZGlmaWNhdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICdtYWluJztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnc2F2ZU1vZGlmaWVkSXRlbScpICYmIHRoaXMuZmluZE5vZGUoJy5tb2RpZnlJdGVtSW5wdXQnKS5fZm91bmROb2RlLnZhbHVlICkge1xyXG4gICAgICAgICAgICAgICAgIGxldCBhbnN3ZXIgPSBbXTtcclxuICAgICAgICAgICAgICAgICBsZXQgdXNlclR3ZWV0ID0gdGhpcy5maW5kTm9kZSgnLm1vZGlmeUl0ZW1JbnB1dCcpLl9mb3VuZE5vZGUudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RvcmVkVHdlZXRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgIGFuc3dlciA9IHRoaXMudmFsaWRhdGVUd2VldCh1c2VyVHdlZXQsIFwiRXJyb3IhIFlvdSBjYW4ndCB0d2VldCBhYm91dCB0aGF0XCIpO1xyXG4gICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICBpZiAoYW5zd2VyLmluY2x1ZGVzKDEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgIGxldCBpZCA9IE1hdGgucmFuZG9tKCkgKiAoMTAwMCAtIDEpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgbGV0IHR3ZWV0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGlkOiBpZCxcclxuICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB1c2VyVHdlZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgbGlrZTogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yZWRUd2VldHMucHVzaCh0d2VldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0d2VldFN0cmluZycsIEpTT04uc3RyaW5naWZ5KHRoaXMuc3RvcmVkVHdlZXRzKSk7XHJcbiAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICdtYWluJztcclxuICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfSAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIFxyXG5cclxuICAgIH1cclxuICAgIFxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiLi4vY29yZS9Db21wb25lbnRcIjtcclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIi4uL0J1dHRvbi9CdXR0b25cIjtcclxuaW1wb3J0IHsgSGVhZGVyIH0gZnJvbSBcIi4uL0hlYWRlci9IZWFkZXJcIjtcclxuaW1wb3J0IHsgVGV4dEFyZWEgfSBmcm9tIFwiLi4vVGV4dEFyZWEvVGV4dEFyZWFcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBFZGl0VHdlZXRQYWdlIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3Rvcih7IHN0b3JlZFR3ZWV0cywgY2xhc3NOYW1lLCBlZGl0VHdlZXQsIGdzIH0pIHtcclxuICAgIHN1cGVyKHtcclxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXHJcbiAgICB9KTtcclxuICAgIHRoaXMuc3RvcmVkVHdlZXRzID0gc3RvcmVkVHdlZXRzO1xyXG4gICAgdGhpcy5lZGl0VHdlZXQgPSBlZGl0VHdlZXQ7XHJcbiAgICB0aGlzLmdzID0gZ3M7XHJcbiAgICB0aGlzLmFkZExpc3RlbmVycyh7IGNsaWNrOiB0aGlzLnRvRWRpdFR3ZWV0LmJpbmQodGhpcykgfSk7XHJcblxyXG4gICAgY29uc3QgQXJlYSA9IG5ldyBUZXh0QXJlYSh7XHJcbiAgICAgIHRleHQ6IHRoaXMuZWRpdFR3ZWV0LnRleHQsXHJcbiAgICB9KTtcclxuICAgIGNvbnNvbGUubG9nKFwiW0FyZWFdXCIsIEFyZWEpO1xyXG4gICAgdGhpcy5maW5kTm9kZShcIi5hZGRfY29udGVudC13cmFwcGVyXCIpXHJcbiAgICAgIC5hcHBlbmQobmV3IEhlYWRlcih7IHRleHQ6IFwiRWRpdCBUd2VldFwiIH0pKVxyXG4gICAgICAuYXBwZW5kKEFyZWEpXHJcbiAgICAgIC5maW5kTm9kZShcIi5tb2RpZnlJdGVtSW5wdXRcIilcclxuICAgICAgLmFmdGVyKG5ldyBDb21wb25lbnQoeyBjbGFzc05hbWU6IFwiYnV0dG9uLXdyYXBwZXJcIiB9KSlcclxuICAgICAgLmZpbmROb2RlKFwiLmJ1dHRvbi13cmFwcGVyXCIpXHJcbiAgICAgIC5hcHBlbmQobmV3IEJ1dHRvbih7IGNsYXNzTmFtZTogXCJjYW5jZWxNb2RpZmljYXRpb25cIiwgdGV4dDogXCJDYW5jZWxcIiB9KSlcclxuICAgICAgLmFwcGVuZChcclxuICAgICAgICBuZXcgQnV0dG9uKHsgY2xhc3NOYW1lOiBcInNhdmVNb2RpZmllZEl0ZW1cIiwgdGV4dDogXCJTYXZlIENoYW5nZVwiIH0pXHJcbiAgICAgICk7XHJcbiAgfVxyXG5cclxuICB2YWxpZGF0ZVR3ZWV0KHVzZXJUd2VldCwgbWVzc2FnZSkge1xyXG4gICAgbGV0IGFuc3dlciA9IFtdO1xyXG4gICAgYW5zd2VyID0gdGhpcy5zdG9yZWRUd2VldHMubWFwKGZ1bmN0aW9uICh0d2VldCkge1xyXG4gICAgICBpZiAodHdlZXQudGV4dCA9PT0gdXNlclR3ZWV0KSB7XHJcbiAgICAgICAgY29uc3QgZXJyb3JUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFic01hc3NhZ2VcIik7XHJcbiAgICAgICAgZXJyb3JUYWcuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcclxuICAgICAgICBlcnJvclRhZy50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XHJcbiAgICAgICAgYW5zd2VyID0gMTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhbnN3ZXIgPSAwO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBhbnN3ZXI7XHJcbiAgICB9KTtcclxuICAgIGNvbnNvbGUubG9nKFwiW2Fuc3dlcl1cIiwgYW5zd2VyKTtcclxuICAgIHJldHVybiBhbnN3ZXI7XHJcbiAgfVxyXG5cclxuICB0b0VkaXRUd2VldChlKSB7XHJcbiAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiY2FuY2VsTW9kaWZpY2F0aW9uXCIpKSB7XHJcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gXCJtYWluXCI7XHJcbiAgICB9XHJcbiAgICBpZiAoXHJcbiAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInNhdmVNb2RpZmllZEl0ZW1cIikgJiZcclxuICAgICAgdGhpcy5maW5kTm9kZShcIi5tb2RpZnlJdGVtSW5wdXRcIikuX2ZvdW5kTm9kZS52YWx1ZVxyXG4gICAgKSB7XHJcbiAgICAgIGxldCBhbnN3ZXIgPSBbXTtcclxuICAgICAgbGV0IHVzZXJUd2VldCA9IHRoaXMuZmluZE5vZGUoXCIubW9kaWZ5SXRlbUlucHV0XCIpLl9mb3VuZE5vZGUudmFsdWU7XHJcbiAgICAgIGlmICh0aGlzLnN0b3JlZFR3ZWV0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgYW5zd2VyID0gdGhpcy52YWxpZGF0ZVR3ZWV0KFxyXG4gICAgICAgICAgdXNlclR3ZWV0LFxyXG4gICAgICAgICAgXCJFcnJvciEgWW91IGNhbid0IHR3ZWV0IGFib3V0IHRoYXRcIlxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGFuc3dlci5pbmNsdWRlcygxKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBpZCA9IHRoaXMuZWRpdFR3ZWV0LmlkO1xyXG4gICAgICAgIGNvbnN0IHR3ZWV0ID0gdGhpcy5zdG9yZWRUd2VldHMuZmlsdGVyKGZ1bmN0aW9uICh0dykge1xyXG4gICAgICAgICAgcmV0dXJuIHR3LmlkID09PSAraWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdHdlZXRbMF0udGV4dCA9IHVzZXJUd2VldDtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInR3ZWV0U3RyaW5nXCIsIEpTT04uc3RyaW5naWZ5KHRoaXMuc3RvcmVkVHdlZXRzKSk7XHJcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBcIm1haW5cIjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb3JlL0NvbXBvbmVudCdcclxuaW1wb3J0IHsgVHdlZXQgfSBmcm9tICcuLi9Ud2VldC9Ud2VldCdcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgTGlrZWRQYWdlIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHtzdG9yZWRUd2VldHMsIGVkaXRUd2VldCwgZ3N9KSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdsaXN0JyxcclxuICAgICAgICAgICAgaHRtbDogYDx1bCBjbGFzcz1cImxpc3QtaXRlbXNcIj48L3VsPmBcclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZ3MgPSBncztcclxuICAgICAgICB0aGlzLnN0b3JlZFR3ZWV0cz0gc3RvcmVkVHdlZXRzO1xyXG4gICAgICAgIHRoaXMuZWRpdFR3ZWV0PSBlZGl0VHdlZXQ7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJlZFR3ZWV0cyA9IHN0b3JlZFR3ZWV0cy5maWx0ZXIodHdlZXQ9PiAgdHdlZXQubGlrZT09PXRydWUpO1xyXG4gICAgICAgXHJcblxyXG4gICAgICAgIHRoaXMuYWRkTGlzdGVuZXJzKHsgY2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzKSB9KTtcclxuICAgICAgICB0aGlzLmZpbmROb2RlKCcubGlzdC1pdGVtcycpXHJcbiAgICAgICAgLmFwcGVuZCh0aGlzLmZpbHRlcmVkVHdlZXRzLm1hcCh0d2VldD0+IG5ldyBUd2VldCh7YXR0cnM6eydkYXRhLWlkJzp0d2VldC5pZH0sIHRleHQ6dHdlZXQudGV4dCwgbGlrZTp0d2VldC5saWtlfSkpKTtcclxuICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZVR3ZWV0KGUpe1xyXG4gICAgICBcclxuICAgICAgICBsZXQgcmVtb3ZlTGkgPSBlLnRhcmdldC5jbG9zZXN0KCdsaScpO1xyXG4gICAgICAgICAgbGV0IHJlbW92ZUlkID0gcmVtb3ZlTGkuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XHJcbiAgICAgICAgICByZW1vdmVMaS5yZW1vdmUoKTtcclxuICAgICAgICAgIHRoaXMuc3RvcmVkVHdlZXRzLmZvckVhY2goZnVuY3Rpb24gKHR3ZWV0LCBpZHgsIGFycmF5KSB7XHJcbiAgICAgICAgICAgIGlmICh0d2VldC5pZCA9PT0gK3JlbW92ZUlkKSB7XHJcbiAgICAgICAgICAgICAgYXJyYXkuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3R3ZWV0U3RyaW5nJywgSlNPTi5zdHJpbmdpZnkodGhpcy5zdG9yZWRUd2VldHMpKTtcclxuICAgICAgICAgIHRoaXMuZ3Muc2V0U3RhdGUoe3N0b3JlZFR3ZWV0czogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInR3ZWV0U3RyaW5nXCIpKX0pO1xyXG5cclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBsaWtlVHdlZXQoZSl7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnW3NtdGggc3RyXScgKTtcclxuICAgICAgICAgICAgbGV0IGxpa2VkTGkgPSBlLnRhcmdldC5jbG9zZXN0KCdsaScpO1xyXG4gICAgICAgICAgICBsZXQgbGlrZWRJZCA9IGxpa2VkTGkuZ2V0QXR0cmlidXRlKCdkYXRhLWlkJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRlc3RBcnJheSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0d2VldFN0cmluZ1wiKSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0ZXN0QXJyYXkuZm9yRWFjaChmdW5jdGlvbiAodHdlZXQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0d2VldC5pZCA9PT0gK2xpa2VkSWQpIHtcclxuICAgICAgICAgICAgICAgICBpZih0d2VldC5saWtlPT09dHJ1ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdHdlZXQubGlrZT1mYWxzZTtcclxuICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICBsaWtlZExpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0d2VldFN0cmluZycsIEpTT04uc3RyaW5naWZ5KHRlc3RBcnJheSkpO1xyXG4gICAgICAgICAgICAgIHRoaXMuZ3Muc2V0U3RhdGUoe3N0b3JlZFR3ZWV0czogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInR3ZWV0U3RyaW5nXCIpKX0pO1xyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICBoYW5kbGVDbGljayhlKXtcclxuICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdyZW1vdmUnKSkge1xyXG4gICAgICAgICAgdGhpcy5yZW1vdmVUd2VldChlKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdsaWtlJykpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tzbXRoIHN0cl0nICk7XHJcbiAgICAgICAgICB0aGlzLmxpa2VUd2VldChlKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0ZXh0JykpIHtcclxuICAgICAgICAgICAgbGV0IGVkaXRMaSA9IGUudGFyZ2V0LmNsb3Nlc3QoJ2xpJyk7XHJcbiAgICAgICAgICAgIGxldCBlZGl0ZWRJZCA9IGVkaXRMaS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKTtcclxuICAgICAgICAgICAgdGhpcy5lZGl0VHdlZXQuaWQ9ZWRpdGVkSWQ7XHJcbiAgICAgICAgICAgIHRoaXMuZWRpdFR3ZWV0LnRleHQ9ZS50YXJnZXQudGV4dENvbnRlbnQ7XHJcbiAgICAgICAgICAgIHRoaXMuY2hla2VkTGlrZVR3ZWV0KCk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gJ2VkaXQnO1xyXG4gICAgICAgICAgfSBcclxuICAgIH1cclxufSIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCIuL2NvcmUvQ29tcG9uZW50XCI7XHJcbmltcG9ydCB7IEhlYWRlciB9IGZyb20gXCIuL0hlYWRlci9IZWFkZXJcIjtcclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIi4vQnV0dG9uL0J1dHRvblwiO1xyXG5pbXBvcnQgeyBMaXN0QWxsVHdlZXRzIH0gZnJvbSBcIi4vTGlzdEFsbFR3ZWV0cy9MaXN0QWxsVHdlZXRzXCI7XHJcbmltcG9ydCB7IEFkZFR3ZWV0UGFnZSB9IGZyb20gXCIuL0FkZFR3ZWV0UGFnZS9BZGRUd2VldFBhZ2VcIjtcclxuaW1wb3J0IHsgRWRpdFR3ZWV0UGFnZSB9IGZyb20gXCIuL0VkaXRUd2VldFBhZ2UvRWRpdFR3ZWV0UGFnZVwiO1xyXG5pbXBvcnQgeyBMaWtlZFBhZ2UgfSBmcm9tIFwiLi9MaWtlZFBhZ2UvTGlrZWRQYWdlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQXBwIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3Rvcih7IGdzIH0pIHtcclxuICAgIGNvbnN0IHsgc3RvcmVkVHdlZXRzLCBhY3RpdmVQYWdlLCBlZGl0VHdlZXQgfSA9IGdzLmdldFN0YXRlKCk7XHJcbiAgICBzdXBlcih7XHJcbiAgICAgIGNsYXNzTmFtZTogXCJhcHBcIixcclxuICAgICAgaHRtbDogJzxkaXYgY2xhc3M9XCJhcHBfX2NvbnRlbnQgY29udGVudC13cmFwcGVyXCI+PC9kaXY+JyxcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuZ3MgPSBncztcclxuICAgIGdzLnN1YnNjcmliZSh0aGlzKTtcclxuICAgIHRoaXMuc3RvcmVkVHdlZXRzID0gc3RvcmVkVHdlZXRzO1xyXG4gICAgdGhpcy5lZGl0VHdlZXQgPSBlZGl0VHdlZXQ7XHJcbiAgICB0aGlzLmFkZExpc3RlbmVycyh7IGNsaWNrOiB0aGlzLmNoYW5nZVBhZ2UuYmluZCh0aGlzKSB9KTtcclxuXHJcbiAgICB0aGlzLmNyZWF0ZU1haW5QYWdlKCk7XHJcbiAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGFjdGl2ZVBhZ2U7XHJcbiAgICBjb25zb2xlLmxvZyhcIlt0aGlzLmdzXVwiLCB0aGlzLmdzKTtcclxuICB9XHJcblxyXG4gIF9yZW5kZXIocHJldlN0YXRlLCBuZXh0U3RhdGUpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiW3ByZXZTdGF0ZV1cIiwgcHJldlN0YXRlKTtcclxuICAgIGNvbnNvbGUubG9nKFwiW25leHRTdGF0ZV1cIiwgbmV4dFN0YXRlKTtcclxuXHJcbiAgICBjb25zdCBwcmV3VHdlZWV0cyA9IHByZXZTdGF0ZS5zdG9yZWRUd2VldHM7XHJcbiAgICBjb25zdCBuZXh0VHdlZWV0cyA9IG5leHRTdGF0ZS5zdG9yZWRUd2VldHM7XHJcbiAgICBjb25zb2xlLmxvZyhcIltnZXQgcHJld11cIiwgdGhpcy5ncy5nZXRMaWtlVHdlZXQocHJld1R3ZWVldHMpKTtcclxuICAgIGNvbnNvbGUubG9nKFwiW2dldCBuZXh0XVwiLCB0aGlzLmdzLmdldExpa2VUd2VldChuZXh0VHdlZWV0cykpO1xyXG5cclxuICAgIGlmICh3aW5kb3cubG9jYXRpb24uaGFzaCAhPT0gXCIjbWFpblwiKSByZXR1cm47XHJcbiAgICBpZiAodGhpcy5ncy5nZXRMaWtlVHdlZXQocHJld1R3ZWVldHMpID09PSB0aGlzLmdzLmdldExpa2VUd2VldChuZXh0VHdlZWV0cykpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBpZiAodGhpcy5ncy5nZXRMaWtlVHdlZXQobmV4dFR3ZWVldHMpID09PSB0cnVlKSB7XHJcbiAgICAgIHRoaXMuZmluZE5vZGUoXCIuZ29Ub0xpa2VkXCIpLnJlbW92ZUNsYXNzKFwiaGlkZGVuXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5maW5kTm9kZShcIi5nb1RvTGlrZWRcIikuYWRkQ2xhc3MoXCJoaWRkZW5cIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjaGFuZ2VQYWdlKGUpIHtcclxuICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJhZGRUd2VldFwiKSkge1xyXG4gICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IFwiYWRkXCI7XHJcbiAgICB9XHJcbiAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZ29Ub0xpa2VkXCIpKSB7XHJcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gXCJsaWtlZFwiO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlVHdlZXRQYWdlKCkge1xyXG4gICAgY29uc3QgeyBzdG9yZWRUd2VldHMgfSA9IHRoaXMuZ3MuZ2V0U3RhdGUoKTtcclxuICAgIHRoaXMuZmluZE5vZGUoXCIuYXBwX19jb250ZW50XCIpXHJcbiAgICAgIC5yZW1vdmVDaGlsZCgpXHJcbiAgICAgIC5hcHBlbmQoXHJcbiAgICAgICAgbmV3IEFkZFR3ZWV0UGFnZSh7XHJcbiAgICAgICAgICBzdG9yZWRUd2VldHM6IHN0b3JlZFR3ZWV0cyxcclxuICAgICAgICAgIGNsYXNzTmFtZTogXCJhZGRfY29udGVudC13cmFwcGVyXCIsXHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuICB9XHJcblxyXG4gIG9uQmFja0NsaWNrKCkge1xyXG4gICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBcIm1haW5cIjtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUxpa2VkUGFnZSgpIHtcclxuICAgIGNvbnN0IHsgc3RvcmVkVHdlZXRzLCBlZGl0VHdlZXQgfSA9IHRoaXMuZ3MuZ2V0U3RhdGUoKTtcclxuICAgIHRoaXMuZmluZE5vZGUoXCIuYXBwX19jb250ZW50XCIpXHJcbiAgICAgIC5yZW1vdmVDaGlsZCgpXHJcbiAgICAgIC5hcHBlbmQoW1xyXG4gICAgICAgIG5ldyBIZWFkZXIoeyB0ZXh0OiBcIkxpa2VkIFR3ZWV0XCIgfSksXHJcbiAgICAgICAgbmV3IEJ1dHRvbih7XHJcbiAgICAgICAgICBjbGFzc05hbWU6IFwibVliYWNrXCIsXHJcbiAgICAgICAgICB0ZXh0OiBcIkJhY2tcIixcclxuICAgICAgICAgIG9uQ2xpY2s6IHRoaXMub25CYWNrQ2xpY2ssXHJcbiAgICAgICAgfSksXHJcbiAgICAgIF0pXHJcbiAgICAgIC5hcHBlbmQoXHJcbiAgICAgICAgbmV3IExpa2VkUGFnZSh7XHJcbiAgICAgICAgICBzdG9yZWRUd2VldHM6IHN0b3JlZFR3ZWV0cyxcclxuICAgICAgICAgIGVkaXRUd2VldDogZWRpdFR3ZWV0LFxyXG4gICAgICAgICAgZ3M6IHRoaXMuZ3MsXHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUVkaXRQYWdlKCkge1xyXG4gICAgdGhpcy5maW5kTm9kZShcIi5hcHBfX2NvbnRlbnRcIilcclxuICAgICAgLnJlbW92ZUNoaWxkKClcclxuICAgICAgLmFwcGVuZChcclxuICAgICAgICBuZXcgRWRpdFR3ZWV0UGFnZSh7XHJcbiAgICAgICAgICBzdG9yZWRUd2VldHM6IHRoaXMuc3RvcmVkVHdlZXRzLFxyXG4gICAgICAgICAgY2xhc3NOYW1lOiBcImFkZF9jb250ZW50LXdyYXBwZXJcIixcclxuICAgICAgICAgIGVkaXRUd2VldDogdGhpcy5lZGl0VHdlZXQsXHJcbiAgICAgICAgICBnczogdGhpcy5ncyxcclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlTWFpblBhZ2UoKSB7XHJcbiAgICBjb25zdCB7IHN0b3JlZFR3ZWV0cywgZWRpdFR3ZWV0IH0gPSB0aGlzLmdzLmdldFN0YXRlKCk7XHJcbiAgICB0aGlzLmZpbmROb2RlKFwiLmFwcF9fY29udGVudFwiKVxyXG4gICAgICAucmVtb3ZlQ2hpbGQoKVxyXG4gICAgICAuYXBwZW5kKFtcclxuICAgICAgICBuZXcgSGVhZGVyKHsgdGV4dDogXCJTaW1wbGUgVHdpdHRlclwiIH0pLFxyXG4gICAgICAgIG5ldyBCdXR0b24oeyBjbGFzc05hbWU6IFwiYWRkVHdlZXRcIiwgdGV4dDogXCJBZGQgVHdlZXRcIiB9KSxcclxuICAgICAgICBuZXcgQnV0dG9uKHtcclxuICAgICAgICAgIGNsYXNzTmFtZTogYGdvVG9MaWtlZCAke1xyXG4gICAgICAgICAgICB0aGlzLmdzLmdldExpa2VUd2VldChzdG9yZWRUd2VldHMpICE9PSB0cnVlID8gXCJoaWRkZW5cIiA6IFwiXCJcclxuICAgICAgICAgIH1gLFxyXG4gICAgICAgICAgdGV4dDogXCJHbyB0byBsaWtlZFwiLFxyXG4gICAgICAgIH0pLFxyXG4gICAgICBdKVxyXG4gICAgICAuYXBwZW5kKFxyXG4gICAgICAgIG5ldyBMaXN0QWxsVHdlZXRzKHtcclxuICAgICAgICAgIHN0b3JlZFR3ZWV0czogc3RvcmVkVHdlZXRzLFxyXG4gICAgICAgICAgZWRpdFR3ZWV0OiBlZGl0VHdlZXQsXHJcbiAgICAgICAgICBnczogdGhpcy5ncyxcclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgR2xvYmFsU3RhdGUge1xyXG4gICAgY29uc3RydWN0b3IoeyBpbml0aWFsU3RhdGUgfSkge1xyXG4gICAgICAgIHRoaXMuX3N0YXRlID0gaW5pdGlhbFN0YXRlO1xyXG4gICAgICAgIHRoaXMuX3ByZXZTdGF0ZSA9IHsgLi4uaW5pdGlhbFN0YXRlIH07XHJcbiAgICAgICAgdGhpcy5fc3Vic2NyaWJlcnMgPSBbXTtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBnZXRTdGF0ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGlrZVR3ZWV0KHR3ZWV0KXtcclxuICAgICAgICBjb25zdCBsaWtlID0gKGVsKSA9PiBlbC5saWtlID09PSB0cnVlO1xyXG4gICAgICAgICAgICBpZih0d2VldC5zb21lKGxpa2UpKXtcclxuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSBlbHNle1xyXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzZXRTdGF0ZSh1cGRhdGVkU3RhdGUpIHtcclxuICAgICAgICBjb25zdCBuZXh0U3RhdGUgPSB7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuX3N0YXRlLFxyXG4gICAgICAgICAgICAuLi51cGRhdGVkU3RhdGVcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuX3ByZXZTdGF0ZSA9IHRoaXMuX3N0YXRlO1xyXG4gICAgICAgIHRoaXMuX3N0YXRlID0gbmV4dFN0YXRlO1xyXG5cclxuICAgICAgICB0aGlzLl9ub3RpZnkoKTtcclxuICAgIH1cclxuXHJcbiAgICBzdWJzY3JpYmUoc3Vic2NyaWJlcikge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuX3N1YnNjcmliZXJzLnB1c2goc3Vic2NyaWJlcik7XHJcbiAgICB9XHJcblxyXG4gICAgX25vdGlmeSgpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHN1YnNjcmliZXIgb2YgdGhpcy5fc3Vic2NyaWJlcnMpIHtcclxuICAgICAgICAgICAgc3Vic2NyaWJlci5fcmVuZGVyKHRoaXMuX3ByZXZTdGF0ZSwgdGhpcy5fc3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9BcHBcIjtcclxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4vY29yZS9Db21wb25lbnRcIjtcclxuaW1wb3J0IHsgR2xvYmFsU3RhdGUsIHJlbmRlciB9IGZyb20gXCIuL2NvcmVcIjtcclxuXHJcbmltcG9ydCBcIi4uL3Njc3Mvc3R5bGUuc2Nzc1wiO1xyXG5cclxuY29uc3QgQUNUSVZFX1BBR0UgPSBcIiNtYWluXCI7XHJcbmxldCB0d2VldHM7XHJcblxyXG5pZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0d2VldFN0cmluZ1wiKSAhPT0gbnVsbCkge1xyXG4gIHR3ZWV0cyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0d2VldFN0cmluZ1wiKSk7XHJcbiAgY29uc3QgbGlrZSA9IChlbCkgPT4gZWwubGlrZSA9PT0gdHJ1ZTtcclxuXHJcbn0gZWxzZSB7XHJcbiAgdHdlZXRzID0gW107XHJcbn1cclxuXHJcbmxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidHdlZXRTdHJpbmdcIiwgSlNPTi5zdHJpbmdpZnkodHdlZXRzKSk7XHJcblxyXG5jb25zdCBncyA9IG5ldyBHbG9iYWxTdGF0ZSh7XHJcbiAgaW5pdGlhbFN0YXRlOiB7XHJcbiAgICBhY3RpdmVQYWdlOiBBQ1RJVkVfUEFHRSxcclxuICAgIHN0b3JlZFR3ZWV0czogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInR3ZWV0U3RyaW5nXCIpKSxcclxuICAgIGVkaXRUd2VldDoge30sXHJcbiAgfSxcclxufSk7XHJcblxyXG5jb25zdCBwcm9wcyA9IHsgZ3MgfTtcclxuY29uc3QgVHdpdHRlciA9IG5ldyBBcHAocHJvcHMpO1xyXG5cclxucmVuZGVyKFR3aXR0ZXIsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSk7XHJcbnJlbmRlcihcclxuICBuZXcgQ29tcG9uZW50KHsgY2xhc3NOYW1lOiBcImhpZGRlbiBhYnNNYXNzYWdlXCIsIHRleHQ6IFwicnJcIiB9KSxcclxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFsZXJ0TWVzc2FnZVwiKVxyXG4pO1xyXG5cclxuY29uc3QgY2hhbmdlUGFnZSA9IGZ1bmN0aW9uICgpIHtcclxuICBpZiAod2luZG93LmxvY2F0aW9uLmhhc2ggPT09IFwiI2FkZFwiKSB7XHJcbiAgICBUd2l0dGVyLmNyZWF0ZVR3ZWV0UGFnZSgpO1xyXG4gIH1cclxuICBpZiAod2luZG93LmxvY2F0aW9uLmhhc2ggPT09IFwiI21haW5cIikge1xyXG4gICAgY29uc3QgZXJyb3JUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFic01hc3NhZ2VcIik7XHJcbiAgICBpZiAoIWVycm9yVGFnLmNsYXNzTGlzdC5jb250YWlucyhcImhpZGRlblwiKSkge1xyXG4gICAgICBlcnJvclRhZy5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIFR3aXR0ZXIuY3JlYXRlTWFpblBhZ2UoKTtcclxuICB9XHJcbiAgaWYgKHdpbmRvdy5sb2NhdGlvbi5oYXNoID09PSBcIiNlZGl0XCIpIHtcclxuICAgIFR3aXR0ZXIuY3JlYXRlRWRpdFBhZ2UoKTtcclxuICB9XHJcbiAgaWYgKHdpbmRvdy5sb2NhdGlvbi5oYXNoID09PSBcIiNsaWtlZFwiKSB7XHJcbiAgICBUd2l0dGVyLmNyZWF0ZUxpa2VkUGFnZSgpO1xyXG4gIH1cclxufTtcclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiaGFzaGNoYW5nZVwiLCBjaGFuZ2VQYWdlKTtcclxuIiwiZXhwb3J0IGNvbnN0IHJlbmRlciA9IChjb21wb25lbnQsIHBhcmVudE5vZGUpID0+IHtcclxuICAgIHBhcmVudE5vZGUuYXBwZW5kKGNvbXBvbmVudC50b05vZGUoKSk7XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=